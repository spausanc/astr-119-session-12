{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define a function and its integral!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func(x):\n",
    "    return np.exp(-2*x) * np.cos(10*x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func_integral(x):\n",
    "    return (-1/52) * np.exp(-2*x) * (np.cos(10*x) - 5*np.sin(10*x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TRAPEZOID METHOD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def trapezoid_core(f, x, h):\n",
    "    return 0.5*h*(f(x+h) + f(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define a wrapper function to perform trapezoid method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def trapezoid_method(f, a, b, N):\n",
    "    # f == function to integrte\n",
    "    # a == lower limit of integration\n",
    "    # b == upper limit of integration\n",
    "    # N == number of function evaluations to use\n",
    "    # Note the number of chunks will be N-1\n",
    "    #so if N is odd, then we don't need to adjust\n",
    "    #the last segment\n",
    "    \n",
    "    # Define x values to perform Trapezoid's rule:\n",
    "    x = np.linspace(a, b, N)\n",
    "    h = x[1] - x[0]\n",
    "    \n",
    "    # Define the value of the integral\n",
    "    Fint = 0.0\n",
    "    \n",
    "    # Perform the integral using the trapezoid method\n",
    "    for i in range(0, len(x)-1, 1):      #Is not including n-1 to avoid overshooting\n",
    "        Fint += trapezoid_core(f, x[i], h)\n",
    "        print (i, i+1, x[i], x[i]+h)\n",
    "        \n",
    "    # Return the answer\n",
    "    return Fint"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SIMPSON'S METHOD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simpson_core(f, x, h):\n",
    "    return h*( f(x) + 4*f(x+h) + f(x+2*h))/3.\n",
    "    #Fitting three points to a parabola"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define a wrapper function to perform Simpsons Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simpsons_method(f, a, b, N):\n",
    "    # f == function to integrte\n",
    "    # a == lower limit of integration\n",
    "    # b == upper limit of integration\n",
    "    # N == number of function evaluations to use\n",
    "    # Note the number of chunks will be N-1\n",
    "    # If N is odd, then we don't need to adjust\n",
    "    #the last segment. If N is even, the last\n",
    "    #segment will have to be split in half to\n",
    "    #perform Simpson's\n",
    "    \n",
    "    # Define x values to perform Simpson's rule:\n",
    "    x = np.linspace(a, b, N)\n",
    "    h = x[1] - x[0]\n",
    "    \n",
    "    # Define the value of the integral\n",
    "    Fint = 0.0\n",
    "        \n",
    "    # Perform the integral using the trapezoid method\n",
    "    for i in range(0, len(x)-2, 2):      #Why are we excluding two \n",
    "        Fint += simpson_core(f, x[i], h)  #values here?\n",
    "        print (i, i+1, x[i], x[i]+h)\n",
    "        \n",
    "    if ((N%2) == 0):\n",
    "         Fint += simpson_core(f, x[-2], 0.5*h)\n",
    "        \n",
    "    # Return the answer\n",
    "    return Fint"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ROMBERG INTEGRATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def romberg_core(f, a, b, I, i):\n",
    "    \n",
    "    #We need the difference b - a\n",
    "    h = b - a\n",
    "    \n",
    "    #and the increment betweem mew func evals\n",
    "    dh = h/2.**(i)\n",
    "    \n",
    "    #and the cofactor\n",
    "    K = h/2.**(i+1)\n",
    "    \n",
    "    #and the function evaluations\n",
    "    M = 0.0\n",
    "    for j in range (2**i):\n",
    "        M += f(a +0.5*dh + j*dh)\n",
    "        \n",
    "    # Return the answer\n",
    "    return K*M"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define a wrapper func to perform Romberg's"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def romberg_integration(f, a, b, tol):\n",
    "    # Remember instead of a simple sum, it's an iteration\n",
    "    \n",
    "    # Define an iteration variable\n",
    "    i = 0\n",
    "    \n",
    "    # Define a maximum number of iterations\n",
    "    imax = 1000\n",
    "    \n",
    "    # Define an error estimate, set to a large value\n",
    "    delta = 100.0*np.fabs(tol) #Estimates the error of the value obtained, so we can compare\n",
    "                #how good one value is to the previous one... When the delta is smaller than our\n",
    "                #tolerance, we can say that these two values are really close to the value we're\n",
    "                #looking for.\n",
    "    \n",
    "    # Set an array of integral answers\n",
    "    I = np.zeros(imax, dtype=float) # This a list of zeroes so we can iterate over it\n",
    "    \n",
    "    # Get the zeroth Romberg iteration\n",
    "    I[0] + 0.5*(b-a)*(f(a) + f(b))\n",
    "    \n",
    "    # Iterate by 1\n",
    "    i += 1\n",
    "    \n",
    "    while (delta>tol):\n",
    "        \n",
    "        # Find this Romberg iteration\n",
    "        I[i] = 0.5*I[i-1] + romberg_core(f, a, b, I, i)\n",
    "        \n",
    "        # Compute the new fractional error estimate \n",
    "        delta = np.fabs( (I[i]-I[i-1]) / I[i] )\n",
    "        \n",
    "        # Since we're dividing for a number I[i], that could be\n",
    "        #zero at any moment, the good practive would be to \n",
    "        #include an error in such case, to know that the error\n",
    "        #estimate is not reliable    \n",
    "        \n",
    "        print (i, I[i], I[i-1], delta)\n",
    "        \n",
    "        if (delta>tol):\n",
    "            # Iterate\n",
    "            i += 1\n",
    "            \n",
    "            if (i>imax):\n",
    "                print (\"Max iterations reached\")\n",
    "                raise StopIteration ('Stopping iteration after ',i)\n",
    "    return I[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Answer = func_integral(np.pi)-func_integral(0)\n",
    "\n",
    "print (\"Fundamental Theorem of Calculus:\")\n",
    "print(Answer)\n",
    "print (\"Trapezoid:\")\n",
    "print(trapezoid_method(func, 0, np.pi, 11))\n",
    "print (\"Simpson's:\")\n",
    "print(simpsons_method(func, 0, np.pi, 11))\n",
    "print(\"Romberg's:\")\n",
    "tolerance = 1.0e-6\n",
    "RI = romberg_integration(func, 0, np.pi, tolerance)\n",
    "print(RI, (RI-Answer)/Answer, tolerance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
